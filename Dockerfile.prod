FROM node:23-alpine AS base
# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app
# Install latest corepack to fix signature issues
RUN npm install -g corepack@latest && corepack enable
# Install dependencies based on the preferred package manager
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* .npmrc* ./
COPY . .
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then pnpm i --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi
# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .
# Install pnpm globally for Payload operations
RUN npm install -g pnpm --unsafe-perm

ENV PAYLOAD_URL=http://localhost:3000
ENV PAYLOAD_URL_POSTS=posts
ENV NEXT_PUBLIC_IMAGE_DOMAINS=localhost
ENV PAYLOAD_SECRET=08db49b7210a36eefb60c62a
ENV DATABASE_URI=postgres://admin:admin@postgres:5432/anyanyelvikultura-payload
# ENV DATABASE_URI=postgres://admin:admin@host.docker.internal:5432/anyanyelvikultura-payload
ENV PAYLOAD_ADMIN_EMAIL=somemail@asd123.asd
ENV PAYLOAD_ADMIN_USERNAME=admin
ENV PAYLOAD_ADMIN_PASSWORD=admin
ENV IS_BUILDING=true

# Run database migrations
RUN pnpm payload migrate:status || echo "No pending migrations found."
RUN pnpm payload migrate || echo "No migrations to apply."
# Build the application

RUN \
  if [ -f yarn.lock ]; then yarn run build; \
  elif [ -f package-lock.json ]; then npm run build; \
  elif [ -f pnpm-lock.yaml ]; then pnpm generate:importmap && pnpm run build; \
  else echo "Lockfile not found." && exit 1; \
  fi
# Run postbuild script
RUN pnpm run postbuild || echo "Postbuild script failed."
# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
COPY --from=builder /app/public ./public
# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs .next
# Automatically leverage output traces to reduce image size
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
USER nextjs
EXPOSE 3000
ENV PORT=3000
# server.js is created by next build from the standalone output

CMD ["node", "server.js"]

# # Dockerfile
# # From https://github.com/vercel/next.js/blob/canary/examples/with-docker/Dockerfile
# # https://www.reddit.com/r/PayloadCMS/comments/1iyiqya/here_is_a_functioning_dockerfile_for_all_those

# FROM node:18-alpine AS base

# # Install dependencies only when needed
# FROM base AS deps
# # Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
# RUN apk add --no-cache libc6-compat
# WORKDIR /app

# # Install corepack (which includes pnpm) and enable it
# RUN npm install -g corepack && corepack enable
# # Ensure the correct version of pnpm is used
# RUN corepack prepare pnpm@9 --activate


# # Install dependencies based on the preferred package manager
# COPY pnpm-lock.yaml* package.json ./
# RUN corepack enable pnpm && pnpm i --frozen-lockfile; 


# # Rebuild the source code only when needed
# FROM base AS builder
# WORKDIR /app
# COPY --from=deps /app/node_modules ./node_modules
# COPY . .

# # Next.js collects completely anonymous telemetry data about general usage.
# # Learn more here: https://nextjs.org/telemetry
# # Uncomment the following line in case you want to disable telemetry during the build.
# # ENV NEXT_TELEMETRY_DISABLED 1

# #RUN corepack prepare pnpm@9.0.0 --activate

# ENV PAYLOAD_URL=http://localhost:3000
# ENV PAYLOAD_URL_POSTS=posts
# ENV NEXT_PUBLIC_IMAGE_DOMAINS=localhost
# ENV PAYLOAD_SECRET=08db49b7210a36eefb60c62a
# ENV DATABASE_URI=postgres://admin:admin@postgres:5432/anyanyelvikultura-payload
# ENV PAYLOAD_ADMIN_EMAIL=somemail@asd123.asd
# ENV PAYLOAD_ADMIN_USERNAME=admin
# ENV PAYLOAD_ADMIN_PASSWORD=admin

# RUN corepack enable pnpm && pnpm run build;

# # Production image, copy all the files and run next
# FROM base AS runner
# WORKDIR /app

# ENV NODE_ENV=production
# # Uncomment the following line in case you want to disable telemetry during runtime.
# # ENV NEXT_TELEMETRY_DISABLED 1

# RUN addgroup --system --gid 1001 nodejs
# RUN adduser --system --uid 1001 nextjs

# COPY --from=builder /app/public ./public

# # Set the correct permission for prerender cache
# RUN mkdir .next
# RUN chown nextjs:nodejs .next

# # Automatically leverage output traces to reduce image size
# # https://nextjs.org/docs/advanced-features/output-file-tracing
# COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
# COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# USER nextjs

# EXPOSE 3000

# ENV PORT=3000

# # server.js is created by next build from the standalone output
# # https://nextjs.org/docs/pages/api-reference/next-config-js/output
# # CMD HOSTNAME="0.0.0.0" node server.js
# CMD ["node", "server.js", "--hostname", "0.0.0.0"]
